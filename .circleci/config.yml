version: 2.1

orbs:
  kube-orb: circleci/kubernetes@0.4.0

jobs:

  build:
    environment:
      CHANGE_MINIKUBE_NONE_USER=true
      BASH_ENV=~/.bashrc
    machine:
      image: 'circleci/classic:201808-01'
    steps:
      - checkout
      - restore_cache:
          keys:
            # Restores the first cache matching a key; most specific first.
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
            - v1-cargo-cache-{{ arch }}-{{ .Branch }}
            - v1-cargo-cache-{{ arch }}
      - run:
          name: Install Rust
          command:  |
            if ! [ -x "$(command -v cargo)" ]; then
              echo 'Cargo not found, installing it'
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              echo 'export PATH=$PATH:$HOME/.cargo/bin' >> $BASH_ENV
            else
              echo 'Found Cargo install'
            fi
      - save_cache:
          paths:
            - ~/.bashrc
            - ~/.cargo
          key: v1-cargo-cache-{{ arch }}
      - run:
          name: Rust Build
          command: cargo build
      - save_cache:
          paths:
            - ~/.bashrc
            - ~/.cargo
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          # If build failed, we want to save some time next build and save the cache for this branch
          # for whatever dependencies were compiled before the build itself failed.
          when: on_fail
          key: v1-cargo-cache-{{ arch }}-{{ .Branch }}

      - save_cache:
          paths:
            - ~/.bashrc
            - ~/.cargo
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          when: on_success
          key: v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
  test:
    environment:
      CHANGE_MINIKUBE_NONE_USER=true
      BASH_ENV=~/.bashrc
    machine:
      image: 'circleci/classic:201808-01'
    steps:
      - checkout
      - kube-orb/install
      - restore_cache:
          keys:
            # Restores the first cache matching a key; most specific first.
            - v1-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
            - v1-cargo-cache-{{ arch }}-{{ .Branch }}
            - v1-cargo-cache-{{ arch }}
      - run:
          name: Install Rust
          command:  |
            if ! [ -x "$(command -v cargo)" ]; then
              echo 'Cargo not found, installing it'
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              echo 'export PATH=$PATH:$HOME/.cargo/bin' >> $BASH_ENV
            fi
      - run:
          command: >
            sudo ps aux | grep apt

            sudo apt-get install -y conntrack &&
            curl -Lo minikube
            https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            \
              && chmod +x minikube
            sudo cp minikube /usr/local/bin && rm minikube

            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048
          name: Start minikube

      - run:
          name: Install Kustomize
          command: |
            sudo wget https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64 -O /usr/bin/kustomize
            sudo chmod +x /usr/bin/kustomize

      - run:
          name: Build CRD minikube
          command: kustomize build k8s/minikube

      - run:
          name: Build CRD production
          command: kustomize build k8s/production

      - run:
          name: Build CRD minikube
          command: kustomize build k8s/minikube

      - run:
          name: Apply CRDs to cluster
          command: kubectl apply -k k8s/minikube -n default || echo "Skipping on Istio error"

      - run:
          command: kubectl get gordos

      - run:
          command: kubectl get models

      - run:
          name: Unit Tests
          command: cargo test --tests -- --test-threads=1

      - run:
          name: Start Gordo Controller
          command: cargo run
          background: true

      - run:
          name: Sleep
          command: sleep 10

      - run:
          name: Integration Tests
          command: cargo test --examples

  build-image:
    machine:
      docker_layer_caching: false
    steps:
      - checkout
      - run:
          name: Build controller image
          command: make controller
          no_output_timeout: 20m

  push-image:
    machine:
      docker_layer_caching: false
    environment:
      GORDO_PROD_MODE: true
    steps:
      - checkout
      - run:
          name: Push Image
          command: |
            echo $(docker images)
            make push-prod-controller

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - build
      - test:
          requires:
            - build
      - build-image:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - push-image:
          requires:
            - build-image
          filters:
            branches:
              only: master
            tags:
              only: /.*/
